"BUA", ""))
) |>
select(-town) |>
rename(town = town_cleaned)
install.packages("remotes")
remotes::install_github("ETC5523-2024/assignment-4-packages-and-shiny-apps-ArunPrakash2901")
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
data <- readxl::read_excel("data-raw/data.xlsx")
save(data, file = "data/data.rda")
load("data/data.rda")
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
ukTownData <- readxl::read_excel("data-raw/data.xlsx")
save(ukTownData, file = "data/ukTownData.rda")
load("data/ukTownData.rda")
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
load("data/ukTownData.rda")
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
View(ukTownData)
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
ukTownData <- readxl::read_excel("data-raw/data.xlsx", sheet = 2)
save(ukTownData, file = "data/ukTownData.rda")
load("data/ukTownData.rda")
View(ukTownData)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData |>
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0_at_19 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000_at_19 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2_at_22 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5_at_22 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6_at_22 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
ukTownData <- ukTownData %>%
mutate(
# Create a binary column: 1 for BUA, 0 for BUASD
is_bua = ifelse(str_detect(town, "BUA") & !str_detect(town, "BUASD"), 1, 0),
# Remove "BUASD", then "BUAs", and then "BUA"
town_cleaned = str_trim(str_replace_all(
str_replace_all(
str_replace_all(town, "BUASD", ""),
"BUAs", ""),
"BUA", ""))
) |>
select(-town) |>
rename(town = town_cleaned)
ukTownData <- ukTownData |>
mutate(
income = as.factor(income),
size = as.factor(size),
population = as.numeric(ukTownData$population),
earnings_above_0_at_19 = as.numeric(earnings_above_0_at_19),
earnings_above_10000_at_19 = as.numeric(earnings_above_10000_at_19),
edu_level1_2_at_22 = as.numeric(edu_level1_2_at_22),
edu_level3_5_at_22 = as.numeric(edu_level3_5_at_22),
edu_level6_at_22 = as.numeric(edu_level6_at_22)
)
usethis::use_data(ukTownData, overwrite = TRUE)
#' Display BUA or BUASD status based on town name
#'
#' This function checks if a town is classified as BUA or BUASD using the `is_bua` column.
#'
#' @param data The dataset containing town information.
#' @param town_name The name of the town to check.
#' @return A string indicating whether the town is a BUA, BUASD, or neither.
#' @export
display_bua_buasd_status <- function(data, town_name) {
# Filter the dataset for the specified town
town_data <- data %>% filter(town == town_name)
# Check if town data exists
if (nrow(town_data) == 0) {
return("Town not found in the dataset.")
}
# Directly check the is_bua status for the town
if (town_data$is_bua == 1) {
return(paste(town_name, "is a BUA (Built-Up Area)."))
} else if (town_data$is_bua == 0) {
return(paste(town_name, "is a BUASD (Built-Up Area Sub-Division)."))
} else {
return(paste(town_name, "does not have a defined BUA or BUASD status."))
}
}
#' List of BUA and BUASD towns
#'
#' This function returns a list containing two data frames: one for towns classified as BUA
#' and another for towns classified as BUASD.
#'
#' @param data The dataset containing town information.
#' @return A list with two data frames: BUA towns and BUASD towns.
#' @export
list_bua_buasd_towns <- function(data) {
bua_towns <- data %>%
filter(is_bua == 1) %>%
pull(town) %>%
unique() %>%
data.frame(town = ., status = "BUA", stringsAsFactors = FALSE)
buasd_towns <- data %>%
filter(is_bua == 0) %>%
pull(town) %>%
unique() %>%
data.frame(town = ., status = "BUASD", stringsAsFactors = FALSE)
# a list to store the data frames
result_list <- list(
BUA = bua_towns,
BUASD = buasd_towns
)
return(result_list)
}
#' Retrieve selected columns
#'
#' This function returns a subset of columns from the dataset.
#'
#' @param data The dataset to subset.
#' @param columns A vector of column names to retrieve.
#' @return A dataframe with only the selected columns.
#' @export
retrieve_selected_columns <- function(data, columns) {
data %>%
select(all_of(columns))
}
#' Retrieve data for a specific town
#'
#' This function returns all rows related to a specific town.
#'
#' @param data The dataset to subset.
#' @param town_name The name of the town to retrieve.
#' @return A dataframe with data for the specified town.
#' @export
retrieve_town_data <- function(data, town_name) {
data %>%
filter(town == town_name)
}
run_app <- function() {
shiny::runApp("R/app.R")
}
run_app <- function() {
shiny::runApp("R/app.R")
}
run_app <- function() {
shiny::runApp("inst/shiny-app/app.R")
}
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
ukTownData <- readxl::read_excel("data-raw/data.xlsx", sheet = 2)
save(ukTownData, file = "data/ukTownData.rda")
load("D:/SEM_2/ETC5523 CWD/Assignments/Assignment 4/assignment-4-packages-and-shiny-apps-ArunPrakash2901/data/ukTownData.rda")
View(ukTownData)
View(ukTownData)
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
ukTownData <- readxl::read_excel("data-raw/data.xlsx", sheet = 2)
save(ukTownData, file = "data/ukTownData.rda")
load("data/ukTownData.rda")
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData |>
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0_at_19 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000_at_19 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2_at_22 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5_at_22 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6_at_22 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
ukTownData <- ukTownData %>%
mutate(
# Create a binary column: 1 for BUA, 0 for BUASD
is_bua = ifelse(str_detect(town, "BUA") & !str_detect(town, "BUASD"), 1, 0),
# Remove "BUASD", then "BUAs", and then "BUA"
town_cleaned = str_trim(str_replace_all(
str_replace_all(
str_replace_all(town, "BUASD", ""),
"BUAs", ""),
"BUA", ""))
) |>
select(-town) |>
rename(town = town_cleaned)
ukTownData <- ukTownData |>
mutate(
income = as.factor(income),
size = as.factor(size),
population = as.numeric(ukTownData$population),
earnings_above_0_at_19 = as.numeric(earnings_above_0_at_19),
earnings_above_10000_at_19 = as.numeric(earnings_above_10000_at_19),
edu_level1_2_at_22 = as.numeric(edu_level1_2_at_22),
edu_level3_5_at_22 = as.numeric(edu_level3_5_at_22),
edu_level6_at_22 = as.numeric(edu_level6_at_22)
)
usethis::use_data(ukTownData1, overwrite = TRUE)
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
ukTownData <- readxl::read_excel("data-raw/data.xlsx", sheet = 2)
save(ukTownData, file = "data/ukTownData.rda")
load("data/ukTownData.rda")
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData |>
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0_at_19 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000_at_19 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2_at_22 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5_at_22 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6_at_22 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
ukTownData <- ukTownData %>%
mutate(
# Create a binary column: 1 for BUA, 0 for BUASD
is_bua = ifelse(str_detect(town, "BUA") & !str_detect(town, "BUASD"), 1, 0),
# Remove "BUASD", then "BUAs", and then "BUA"
town_cleaned = str_trim(str_replace_all(
str_replace_all(
str_replace_all(town, "BUASD", ""),
"BUAs", ""),
"BUA", ""))
) |>
select(-town) |>
rename(town = town_cleaned)
ukTownData1 <- ukTownData |>
mutate(
income = as.factor(income),
size = as.factor(size),
population = as.numeric(ukTownData$population),
earnings_above_0_at_19 = as.numeric(earnings_above_0_at_19),
earnings_above_10000_at_19 = as.numeric(earnings_above_10000_at_19),
edu_level1_2_at_22 = as.numeric(edu_level1_2_at_22),
edu_level3_5_at_22 = as.numeric(edu_level3_5_at_22),
edu_level6_at_22 = as.numeric(edu_level6_at_22)
)
usethis::use_data(ukTownData1, overwrite = TRUE)
#' Display BUA or BUASD status based on town name
#'
#' This function checks if a town is classified as BUA or BUASD using the `is_bua` column.
#'
#' @param data The dataset containing town information.
#' @param town_name The name of the town to check.
#' @return A string indicating whether the town is a BUA, BUASD, or neither.
#' @export
display_bua_buasd_status <- function(data, town_name) {
# Filter the dataset for the specified town
town_data <- data %>% filter(town == town_name)
# Check if town data exists
if (nrow(town_data) == 0) {
return("Town not found in the dataset.")
}
# Directly check the is_bua status for the town
if (town_data$is_bua == 1) {
return(paste(town_name, "is a BUA (Built-Up Area)."))
} else if (town_data$is_bua == 0) {
return(paste(town_name, "is a BUASD (Built-Up Area Sub-Division)."))
} else {
return(paste(town_name, "does not have a defined BUA or BUASD status."))
}
}
#' List of BUA and BUASD towns
#'
#' This function returns a list containing two data frames: one for towns classified as BUA
#' and another for towns classified as BUASD.
#'
#' @param data The dataset containing town information.
#' @return A list with two data frames: BUA towns and BUASD towns.
#' @export
list_bua_buasd_towns <- function(data) {
bua_towns <- data %>%
filter(is_bua == 1) %>%
pull(town) %>%
unique() %>%
data.frame(town = ., status = "BUA", stringsAsFactors = FALSE)
buasd_towns <- data %>%
filter(is_bua == 0) %>%
pull(town) %>%
unique() %>%
data.frame(town = ., status = "BUASD", stringsAsFactors = FALSE)
# a list to store the data frames
result_list <- list(
BUA = bua_towns,
BUASD = buasd_towns
)
return(result_list)
}
#' Retrieve selected columns
#'
#' This function returns a subset of columns from the dataset.
#'
#' @param data The dataset to subset.
#' @param columns A vector of column names to retrieve.
#' @return A dataframe with only the selected columns.
#' @export
retrieve_selected_columns <- function(data, columns) {
data %>%
select(all_of(columns))
}
#' Retrieve data for a specific town
#'
#' This function returns all rows related to a specific town.
#'
#' @param data The dataset to subset.
#' @param town_name The name of the town to retrieve.
#' @return A dataframe with data for the specified town.
#' @export
retrieve_town_data <- function(data, town_name) {
data %>%
filter(town == town_name)
}
run_app <- function() {
shiny::runApp("inst/shiny-app.R")
}
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
load("data/ukTownData.rda")
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData |>
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0_at_19 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000_at_19 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2_at_22 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5_at_22 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6_at_22 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
ukTownData <- ukTownData %>%
mutate(
# Create a binary column: 1 for BUA, 0 for BUASD
is_bua = ifelse(str_detect(town, "BUA") & !str_detect(town, "BUASD"), 1, 0),
# Remove "BUASD", then "BUAs", and then "BUA"
town_cleaned = str_trim(str_replace_all(
str_replace_all(
str_replace_all(town, "BUASD", ""),
"BUAs", ""),
"BUA", ""))
) |>
select(-town) |>
rename(town = town_cleaned)
ukTownData1 <- ukTownData |>
mutate(
income = as.factor(income),
size = as.factor(size),
population = as.numeric(ukTownData$population),
earnings_above_0_at_19 = as.numeric(earnings_above_0_at_19),
earnings_above_10000_at_19 = as.numeric(earnings_above_10000_at_19),
edu_level1_2_at_22 = as.numeric(edu_level1_2_at_22),
edu_level3_5_at_22 = as.numeric(edu_level3_5_at_22),
edu_level6_at_22 = as.numeric(edu_level6_at_22)
)
usethis::use_data(ukTownData1, overwrite = TRUE)
#' Display BUA or BUASD status based on town name
#'
#' This function checks if a town is classified as BUA or BUASD using the `is_bua` column.
#'
#' @param data The dataset containing town information.
#' @param town_name The name of the town to check.
#' @return A string indicating whether the town is a BUA, BUASD, or neither.
#' @export
display_bua_buasd_status <- function(data, town_name) {
# Filter the dataset for the specified town
town_data <- data %>% filter(town == town_name)
# Check if town data exists
if (nrow(town_data) == 0) {
return("Town not found in the dataset.")
}
# Directly check the is_bua status for the town
if (town_data$is_bua == 1) {
return(paste(town_name, "is a BUA (Built-Up Area)."))
} else if (town_data$is_bua == 0) {
return(paste(town_name, "is a BUASD (Built-Up Area Sub-Division)."))
} else {
return(paste(town_name, "does not have a defined BUA or BUASD status."))
}
}
#' List of BUA and BUASD towns
#'
#' This function returns a list containing two data frames: one for towns classified as BUA
#' and another for towns classified as BUASD.
#'
#' @param data The dataset containing town information.
#' @return A list with two data frames: BUA towns and BUASD towns.
#' @export
list_bua_buasd_towns <- function(data) {
bua_towns <- data %>%
filter(is_bua == 1) %>%
pull(town) %>%
unique() %>%
data.frame(town = ., status = "BUA", stringsAsFactors = FALSE)
buasd_towns <- data %>%
filter(is_bua == 0) %>%
pull(town) %>%
unique() %>%
data.frame(town = ., status = "BUASD", stringsAsFactors = FALSE)
# a list to store the data frames
result_list <- list(
BUA = bua_towns,
BUASD = buasd_towns
)
return(result_list)
}
