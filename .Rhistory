income_flag,
activity_at_age_19_employment_with_earnings_above_0,
activity_at_age_19_employment_with_earnings_above_10000,
highest_level_qualification_achieved_by_age_22_level_1_to_2,
highest_level_qualification_achieved_by_age_22_level_3_to_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000 = activity_at_age_19_employment_with_earnings_above_10000,
edu_level1_2 = highest_level_qualification_achieved_by_age_22_level_1_to_2,
edu_level3_5 = highest_level_qualification_achieved_by_age_22_level_3_to_5,
edu_level6 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
usethis::use_data(ukTownData, overwrite = TRUE)
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData %>%
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_x0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_x10000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
View(ukTownData)
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
View(ukTownData)
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
View(ukTownData)
View(ukTownData)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData %>%
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData %>%
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
usethis::use_data(ukTownData, overwrite = TRUE)
source("R/ukTownData.R")
getwd()
source("R/ukTownData.R")
install.packages("testthat")
install.packages("testthat")
test_that("analyze_uk_town works correctly", {
test_data <- data.frame(
town = c("London", "Birmingham"),
population = c(8900000, 1100000),
area = c(1572, 267)
)
result <- analyze_uk_town(test_data)
expect_equal(result$mean_population, mean(c(8900000, 1100000)))
expect_equal(result$total_area, sum(c(1572, 267)))
})
library(testthat)
test_that("analyze_uk_town works correctly", {
test_data <- data.frame(
town = c("London", "Birmingham"),
population = c(8900000, 1100000),
area = c(1572, 267)
)
result <- analyze_uk_town(test_data)
expect_equal(result$mean_population, mean(c(8900000, 1100000)))
expect_equal(result$total_area, sum(c(1572, 267)))
})
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData |>
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
usethis::use_data(ukTownData, overwrite = TRUE)
#' Retrieve selected columns
#'
#' This function returns a subset of columns from the dataset.
#'
#' @param data The dataset to subset.
#' @param columns A vector of column names to retrieve.
#' @return A dataframe with only the selected columns.
#' @export
retrieve_selected_columns <- function(data, columns) {
data %>%
select(all_of(columns))
}
#' Retrieve data for a specific town
#'
#' This function returns all rows related to a specific town.
#'
#' @param data The dataset to subset.
#' @param town_name The name of the town to retrieve.
#' @return A dataframe with data for the specified town.
#' @export
retrieve_town_data <- function(data, town_name) {
data %>%
filter(town == town_name)
}
#' Get statistics for a specific town
#'
#' This function returns key statistics (population, education levels, income) for a given town.
#'
#' @param data The dataset to retrieve statistics from.
#' @param town_name The name of the town to retrieve statistics for.
#' @return A dataframe with the town's statistics.
#' @export
get_town_statistics <- function(data, town_name) {
data %>%
filter(town == town_name) %>%
summarise(
population = first(population),
avg_edu_level1_2 = first(edu_level1_2),
avg_edu_level3_5 = first(edu_level3_5),
avg_edu_level6 = first(edu_level6),
earnings_above_0 = first(earnings_above_0),
earnings_above_10000 = first(earnings_above_10000),
income_flag = first(income)
)
}
#' T-test to compare earnings across town sizes
#'
#' This function performs a t-test to compare earnings between two town size categories.
#'
#' @param data The dataset to analyze.
#' @param size1 The first size category (e.g., "Small Towns").
#' @param size2 The second size category (e.g., "Large Towns").
#' @return The result of the t-test.
#' @export
t_test_earnings_by_size <- function(data, size1, size2) {
size1_data <- data %>% filter(size == size1) %>% pull(earnings_above_10000)
size2_data <- data %>% filter(size == size2) %>% pull(earnings_above_10000)
t.test(size1_data, size2_data, na.rm = TRUE)
}
#' ANOVA to compare education levels across town categories
#'
#' This function performs an ANOVA to test differences in education levels across town categories.
#'
#' @param data The dataset to analyze.
#' @param category The town category to compare (e.g., "coastal").
#' @return The ANOVA result.
#' @export
anova_education_by_category <- function(data, category) {
model <- aov(edu_level3_5 ~ get(category), data = data)
summary(model)
}
View(ukTownData)
load("D:/SEM_2/ETC5523 CWD/Assignments/Assignment 4/assignment-4-packages-and-shiny-apps-ArunPrakash2901/data/ukTownData.rda")
View(ukTownData)
library(stringr)
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData |>
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
# clean town names and create a BUA/BUASD binary column
ukTownData <- ukTownData |>
mutate(
# binary column: 1 if BUA, 0 if BUASD
is_bua = ifelse(stringr::str_detect(town11nm, regex("BUA", ignore_case = TRUE)) &
!stringr::str_detect(town11nm, regex("BUASD", ignore_case = TRUE)), 1, 0),
# removing "BUA" and "BUASD"
town_cleaned = stringr::str_replace_all(town11nm, regex("BUA|BUASD", ignore_case = TRUE), "") |>
stringr::str_trim()
)
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData |>
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
# clean town names and create a BUA/BUASD binary column
ukTownData <- ukTownData |>
mutate(
# binary column: 1 if BUA, 0 if BUASD
is_bua = ifelse(stringr::str_detect(town11nm, regex("BUA", ignore_case = TRUE)) &
!stringr::str_detect(town11nm, regex("BUASD", ignore_case = TRUE)), 1, 0),
# removing "BUA" and "BUASD"
town_cleaned = stringr::str_replace_all(town11nm, regex("BUA|BUASD", ignore_case = TRUE), "") |>
stringr::str_trim()
)
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData |>
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
# clean town names and create a BUA/BUASD binary column
ukTownData <- ukTownData |>
mutate(
# binary column: 1 if BUA, 0 if BUASD
is_bua = ifelse(stringr::str_detect(town, regex("BUA", ignore_case = TRUE)) &
!stringr::str_detect(town, regex("BUASD", ignore_case = TRUE)), 1, 0),
# removing "BUA" and "BUASD"
town_cleaned = stringr::str_replace_all(town, regex("BUA|BUASD", ignore_case = TRUE), "") |>
stringr::str_trim()
)
View(ukTownData)
usethis::use_data(ukTownData, overwrite = TRUE)
View(ukTownData)
load("D:/SEM_2/ETC5523 CWD/Assignments/Assignment 4/assignment-4-packages-and-shiny-apps-ArunPrakash2901/data/ukTownData.rda")
## code to prepare `ukTownData` dataset goes here
library(readxl)
library(dplyr)
library(janitor)
library(stringr)
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
ukTownData <- ukTownData |>
mutate(across(where(is.character),
~na_if(., "*"))) # special characters ('*') with NA
ukTownData <- ukTownData |>
select(
town11nm,
population_2011,
size_flag,
income_flag,
activity_at_age_19_employment_with_earnings_above_0, # Correct column name here
activity_at_age_19_employment_with_earnings_above_10_000, # Correct column name here
highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
highest_level_qualification_achieved_by_age_22_level_6_or_above,
education_score
)
# Rename columns to shorter names
ukTownData <- ukTownData |>
rename(
town = town11nm,
population = population_2011,
size = size_flag,
income = income_flag,
earnings_above_0 = activity_at_age_19_employment_with_earnings_above_0,
earnings_above_10000 = activity_at_age_19_employment_with_earnings_above_10_000,
edu_level1_2 = highest_level_qualification_achieved_by_age_22_level_1_to_level_2,
edu_level3_5 = highest_level_qualification_achieved_by_age_22_level_3_to_level_5,
edu_level6 = highest_level_qualification_achieved_by_age_22_level_6_or_above,
edu_score = education_score
)
# clean town names and create a BUA/BUASD binary column
ukTownData <- ukTownData |>
mutate(
# binary column: 1 if BUA, 0 if BUASD
is_bua = ifelse(stringr::str_detect(town, regex("BUA", ignore_case = TRUE)) &
!stringr::str_detect(town, regex("BUASD", ignore_case = TRUE)), 1, 0),
# removing "BUA" and "BUASD"
town = stringr::str_replace_all(town, regex("BUA|BUASD", ignore_case = TRUE), "") |>
stringr::str_trim()
)
usethis::use_data(ukTownData, overwrite = TRUE)
#' Display BUA or BUASD status based on town name
#'
#' This function checks if a town name contains "BUA" or "BUASD" and returns its classification.
#'
#' @param data The dataset containing town information.
#' @param town_name The name of the town to check.
#' @return A string indicating whether the town is a BUA, BUASD, or neither.
#' @export
display_bua_buasd_status <- function(data, town_name) {
town_data <- data %>% filter(town11nm == town_name)
if (nrow(town_data) == 0) {
return("Town not found in the dataset.")
}
if (stringr::str_detect(town_data$town11nm, regex("BUA", ignore_case = TRUE)) &&
!stringr::str_detect(town_data$town11nm, regex("BUASD", ignore_case = TRUE))) {
return(paste(town_name, "is a BUA (Built-Up Area)."))
} else if (stringr::str_detect(town_data$town11nm, regex("BUASD", ignore_case = TRUE))) {
return(paste(town_name, "is a BUASD (Built-Up Area Sub-Division)."))
} else {
return(paste(town_name, "does not have a defined BUA or BUASD status."))
}
}
#' Display BUA or BUASD status based on town name
#'
#' This function checks if a town name contains "BUA" or "BUASD" and returns its classification.
#'
#' @param data The dataset containing town information.
#' @param town_name The name of the town to check.
#' @return A string indicating whether the town is a BUA, BUASD, or neither.
#' @export
display_bua_buasd_status <- function(data, town_name) {
town_data <- data %>% filter(town == town_name)
if (nrow(town_data) == 0) {
return("Town not found in the dataset.")
}
town_status <- town_data$is_bua[1]  # Assuming only one row per town_name
if (town_status == 1) {
return(cat(town_name, "is a BUA (Built-Up Area).\n"))
} else if (town_status == 0) {
return(cat(town_name, "is a BUASD (Built-Up Area Sub-Division).\n"))
} else {
return(cat(town_name, "does not have a defined BUA or BUASD status.\n"))
}
}
#' Display BUA or BUASD status based on town name
#'
#' This function checks if a town name contains "BUA" or "BUASD" and returns its classification.
#'
#' @param data The dataset containing town information.
#' @param town_name The name of the town to check.
#' @return A string indicating whether the town is a BUA, BUASD, or neither.
#' @export
display_bua_buasd_status <- function(data, town_name) {
town_data <- data %>% filter(town == town_name)
if (nrow(town_data) == 0) {
return("Town not found in the dataset.")
}
town_status <- town_data$is_bua[1]  # Assuming only one row per town_name
if (town_status == 1) {
return(cat(town_name, "is a BUA (Built-Up Area).\n"))
} else if (town_status == 0) {
return(cat(town_name, "is a BUASD (Built-Up Area Sub-Division).\n"))
} else {
return(cat(town_name, "does not have a defined BUA or BUASD status.\n"))
}
}
#' List of BUA and BUASD towns in tabular format
#'
#' This function returns a data frame with towns that contain "BUA" or "BUASD" in their name and their classification.
#'
#' @param data The dataset containing town information.
#' @return A data frame with columns: Town and Classification (BUA or BUASD).
#' @export
list_bua_buasd_towns <- function(data) {
bua_buasd_towns <- data %>%
filter(stringr::str_detect(town, regex("BUA", ignore_case = TRUE))) %>%
mutate(Classification = case_when(
stringr::str_detect(town, regex("BUASD", ignore_case = TRUE)) ~ "BUASD",
TRUE ~ "BUA"
)) %>%
select(Town = town, Classification) %>%
unique()
return(bua_buasd_towns)
}
ukTownData <- read_excel("data-raw/data.xlsx", sheet = 2)
ukTownData <- ukTownData |>
clean_names()  # simplifies column names
